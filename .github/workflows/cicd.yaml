name: tongueDetection-ci

on:
  push:
    branches:
      - "*"
  workflow_dispatch:

env:
  NODE_ENV: ci
  POSTGRES_DB: tongue-ci
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  SERVER_HOST: 18.142.205.192
  GIT_PROJECT_CLIENT_DIR: web-client
  GIT_PROJECT_SERVER_DIR: web-server
  GIT_PROJECT_AI_SERVER_DIR: ai-server
  SERVER_USER: tongueTest
  SERVER_PROJECT_CLIENT_DIR: ~/tongueTest-Server/web-client
  SERVER_PROJECT_SERVER_DIR: ~/tongueTest-Server/web-server
  SERVER_PROJECT_AI_SERVER_DIR: ~/tongueTest-Server/ai-server
  PM2_WEB_SERVER_NAME: tongueTest-Server
  PM2_AI_SERVER_NAME: ai-Server

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    container: node:18.16.0-slim
    services:
      postgres:
        image: postgres:14.7-alpine3.17
        env:
          POSTGRES_DB: ${{env.POSTGRES_DB}}
          POSTGRES_USER: ${{env.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
          POSTGRES_HOST: ${{env.POSTGRES_HOST}}
          POSTGRES_PORT: ${{env.POSTGRES_PORT}}
    steps:
      - uses: actions/checkout@v3
      - name: npm install in web-client
        run: |
          cd ${{env.GIT_PROJECT_CLIENT_DIR}}
          npm install
      - name: client-esbuild
        run: |
          cd ${{env.GIT_PROJECT_CLIENT_DIR}}
          npm run build
      - name: test
        run: |
          cd ${{env.GIT_PROJECT_CLIENT_DIR}}
          ls public
      - name: archive built js files in client
        uses: actions/upload-artifact@v3
        with:
          name: client-esbuild-output
          path: ${{env.GIT_PROJECT_CLIENT_DIR}}/public/dist
      - name: npm install in web-server
        run: |
          cd ${{env.GIT_PROJECT_SERVER_DIR}}
          npm install
      - name: jest test
        run: |
          cd ${{env.GIT_PROJECT_SERVER_DIR}}
          npm run ci
      - name: tsc build
        run: |
          cd ${{env.GIT_PROJECT_SERVER_DIR}}
          npm run build
      - name: archive built js files in server
        uses: actions/upload-artifact@v3
        with:
          name: server-tsc-output
          path: ${{env.GIT_PROJECT_SERVER_DIR}}/dist

  deploy:
    if: github.ref_name == 'production'
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - uses: actions/checkout@v3
      - name: restore built js files
        uses: actions/download-artifact@v3
        with:
          name: server-tsc-output
          path: ${{env.GIT_PROJECT_SERVER_DIR}}/dist
      - name: restore built js files
        uses: actions/download-artifact@v3
        with:
          name: client-esbuild-output
          path: ${{env.GIT_PROJECT_CLIENT_DIR}}/public/dist
      # - name: check restored files
      #   run: |
      #     cd ${{env.GIT_PROJECT_SERVER_DIR}}
      #     ls -l dist
      - name: setup ssh credential
        run: |
          mkdir -p ~/.ssh
          cd ~/.ssh
          echo "Host server" >> config
          echo "  Hostname ${{env.SERVER_HOST}}" >> config
          echo "  User ${{env.SERVER_USER}}" >> config
          echo "  IdentityFile = ~/.ssh/github.pem" >> config
          echo "${{secrets.SSH_PRIVATE_KEY}}" > github.pem
          chmod 400 github.pem
          ssh-keyscan ${{env.SERVER_HOST}} >> known_hosts
      # - name: test ssh setup
      #  run: |
      #   ssh server ls -lah
      - name: upload built js files to web-client
        run: |
          cd ${{env.GIT_PROJECT_CLIENT_DIR}}
          rsync -SavLP \
            package.json \
            public \
            server:${{env.SERVER_PROJECT_CLIENT_DIR}}
      - name: upload built js files to web server
        run: |
          cd ${{env.GIT_PROJECT_SERVER_DIR}}
          rsync -SavLP \
            dist \
            package.json \
            server:${{env.SERVER_PROJECT_SERVER_DIR}}
      - name: upload ai server to ubuntu server
        run: |
          cd ${{env.GIT_PROJECT_AI_SERVER_DIR}}
          rsync -SavLP \
            server.py \
            requirements.txt \
            server:${{env.SERVER_PROJECT_AI_SERVER_DIR}}
      - name: update web-client and server
        run: |
          ssh server "
            source ~/.nvm/nvm.sh && \
            cd ${{env.SERVER_PROJECT_CLIENT_DIR}} && \
            npm i --omit=dev && \
            cd ${{env.SERVER_PROJECT_SERVER_DIR}} && \
            npm i --omit=dev && \
            cp .env dist/ &&\
            cd dist &&\
            npx knex migrate:latest &&\
            pm2 reload ${{env.PM2_WEB_SERVER_NAME}} &&\
            echo done!
          "
      - name: update ai-server
        run: |
          ssh server "
            cd  ${{env.SERVER_PROJECT_AI_SERVER_DIR}} && \
            python -m venv .pyenv && \
            source .pyenv/bin/activate && \
            pip install -r requirements.txt && \
            pm2 reload ${{env.PM2_AI_SERVER_NAME}} &&\
            echo done!
          "
